name: Azure API CI/CD

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'BAAP.API/**'
      - 'BAAP.sln'
      - '.github/workflows/azure-api-ci-cd.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'BAAP.API/**'
      - 'BAAP.sln'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

env:
  DOTNET_VERSION: '8.0'
  AZURE_WEBAPP_PACKAGE_PATH: './publish'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Test
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write
    outputs:
      artifact-name: baap-api-${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore BAAP.sln

      - name: Build application
        run: dotnet build BAAP.sln --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      - name: Run unit tests
        run: |
          # Check if test projects exist before running tests
          if dotnet sln BAAP.sln list | grep -i test; then
            echo "Test projects found, running tests..."
            dotnet test BAAP.sln --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --collect:"XPlat Code Coverage" --logger trx
          else
            echo "No test projects found, skipping tests..."
            echo "‚ö†Ô∏è Consider adding unit tests for better code quality assurance"
          fi

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && hashFiles('**/*.trx') != ''
        with:
          name: .NET Tests
          path: "**/*.trx"
          reporter: dotnet-trx
          fail-on-error: true

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: (success() || failure()) && hashFiles('**/coverage.cobertura.xml') != ''
        with:
          filename: "**/coverage.cobertura.xml"
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Security scan with CodeQL
        uses: github/codeql-action/init@v3
        if: github.event_name == 'push'
        continue-on-error: true
        with:
          languages: csharp
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        if: github.event_name == 'push'
        continue-on-error: true
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        if: github.event_name == 'push'
        continue-on-error: true

      - name: Publish application
        run: |
          dotnet publish BAAP.API/BAAP.API.csproj \
            --no-build \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} \
            --runtime linux-x64 \
            --self-contained false

      - name: Create deployment package info
        run: |
          echo "Build Date: $(date)" > ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/build-info.txt
          echo "Git Commit: ${{ github.sha }}" >> ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/build-info.txt
          echo "Git Branch: ${{ github.ref_name }}" >> ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/build-info.txt
          echo "Build Number: ${{ github.run_number }}" >> ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/build-info.txt

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: baap-api-${{ github.sha }}
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          retention-days: 30

  deploy-dev:
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    runs-on: ubuntu-latest
    needs: build
    environment: development
    name: Deploy to Development
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Deploy to Azure App Service (Development)
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_DEV }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DEV }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Set App Service configuration
        run: |
          az webapp config appsettings set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_DEV }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_DEV }} \
            --settings ASPNETCORE_ENVIRONMENT=Development \
                      DEPLOYMENT_TIMESTAMP="$(date -u)" \
                      GIT_COMMIT="${{ github.sha }}" \
                      BUILD_NUMBER="${{ github.run_number }}"

      - name: Restart App Service
        run: |
          az webapp restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_DEV }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_DEV }}

      - name: Warm up application
        run: |
          sleep 30
          curl -f ${{ secrets.AZURE_WEBAPP_URL_DEV }}/api/configuration/health || echo "Health check failed"

      - name: Run smoke tests
        run: |
          curl -f ${{ secrets.AZURE_WEBAPP_URL_DEV }}/swagger/index.html || echo "Swagger endpoint failed"

  deploy-prod:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    needs: build
    environment: production
    name: Deploy to Production
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Deploy to staging slot
        id: deploy-to-staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_PROD }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PROD_STAGING }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          slot-name: staging

      - name: Set staging slot configuration
        run: |
          az webapp config appsettings set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PROD }} \
            --slot staging \
            --settings ASPNETCORE_ENVIRONMENT=Production \
                      DEPLOYMENT_TIMESTAMP="$(date -u)" \
                      GIT_COMMIT="${{ github.sha }}" \
                      BUILD_NUMBER="${{ github.run_number }}"

      - name: Warm up staging slot
        run: |
          sleep 60
          curl -f ${{ secrets.AZURE_WEBAPP_URL_PROD_STAGING }}/api/configuration/health || echo "Staging health check failed"

      - name: Run staging smoke tests
        run: |
          curl -f ${{ secrets.AZURE_WEBAPP_URL_PROD_STAGING }}/swagger/index.html || echo "Staging swagger failed"

      - name: Swap to production slot
        run: |
          az webapp deployment slot swap \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PROD }} \
            --slot staging \
            --target-slot production

      - name: Verify production deployment
        run: |
          sleep 30
          curl -f ${{ secrets.AZURE_WEBAPP_URL_PROD }}/api/configuration/health || echo "Production health check failed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "API URL: ${{ secrets.AZURE_WEBAPP_URL_PROD }}"
          echo "Swagger: ${{ secrets.AZURE_WEBAPP_URL_PROD }}/swagger"

  rollback-prod:
    if: failure() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, deploy-prod]
    environment: production
    name: Rollback Production
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Rollback production slot
        run: |
          az webapp deployment slot swap \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PROD }} \
            --slot production \
            --target-slot staging

      - name: Notify rollback
        run: echo "‚ö†Ô∏è Production deployment failed and was rolled back"